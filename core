#!/bin/bash

install() {
  # get system os/arch
  local arch="$PACKAGE_OS_ARCH"
  local kernel="$PACKAGE_OS_KERNEL"
  local platform="$PACKAGE_OS_PLATFORM"
  # usr_bin_dir
  local usr_bin_dir="$PACKAGE_USER_BIN_DIR"
  local tmp_dir="$PACKAGE_TMP_DIR"

  # prepare vars
  local name="buildx"
  # files
  local tmp_file="$name"
  local bin_file="$tmp_file"

  # prepare context
  cd $tmp_dir

  if [ "$(os::has_command docker)" != "true" ]; then
    zmicro package install docker-cli
  fi

  # reference: https://github.com/docker/buildx/releases
  # example:
  #   https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.darwin-arm64
  #   https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.darwin-amd64
  #   https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.linux-arm64
  #   https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.linux-amd64 
  # generate url
  local url="${PACKAGE_CORE_RELEASE_DOWNLOAD}/$PACKAGE_CORE_VERSION/${name}-${PACKAGE_CORE_VERSION}.${platform}-${arch}"
  log::debug "[package][$name][$kernel][$arch] url: $url"

  # download
  os::download $tmp_file $url

  # make executable
  chmod +x $bin_file

  # install
  sudo mv $bin_file $usr_bin_dir/${PACKAGE_CORE_NAME}

  # clean
  rm -rf $tmp_dir

  # if [ "$(os::is_macos)" = "true" ]; then
  #   log::info "[$(timestamp)] ignore create docker buildx build, because Docker Buildx is included in Docker Desktop for macOS."
  #   return 0
  # fi

  if [ "$CI" = "true" ]; then
    if [ -z "$GITHUB_CI" ] || [ -z "$GITHUB_ACTIONS" ]; then
      log::info "[$(timestamp)] install buildx in github action (platform: $platform, arch: $arch)"
    elif [ -z "$GITLAB_CI" ]; then
      log::info "[$(timestamp)] install buildx in gitlab ci (platform: $platform, arch: $arch)"
    elif [ -z "$EUNOMIA_CI" ]; then
      log::info "[$(timestamp)] install buildx in eunomia ci (platform: $platform, arch: $arch)"
    else
      log::info "[$(timestamp)] ignore create docker buildx build in CI mode."
      return 0
    fi
  fi

  export HOME=${HOME:-/root}

  # as docker plugin
  # https://github.com/docker/buildx
  mkdir -p $HOME/.docker/cli-plugins
  log::info "[$(timestamp)] creating docker plugin: ${PACKAGE_CORE_NAME} ..."
  # log::info "[$(timestamp)] command: ln -sf $usr_bin_dir/${PACKAGE_CORE_NAME} $HOME/.docker/cli-plugins/${PACKAGE_CORE_NAME}"
  ln -sf $usr_bin_dir/${PACKAGE_CORE_NAME} $HOME/.docker/cli-plugins/${PACKAGE_CORE_NAME}
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to create docker plugin: ${PACKAGE_CORE_NAME}."
    return 1
  fi

  # # if it in docker build env, do not create builder instance
  # if [ "$(os::is_docker_build_env)" = "true" ] || [ "$(os::is_docker)" = "true" ]; then
  #   return
  # fi

  # # create builder instance
  # local builder_name=buildx
  # has_builder() {
  #   docker buildx ls 2>>/dev/null | grep $1 >>/dev/null 2>&1
  #   if [ "$?" != "0" ]; then
  #     echo "false"
  #   else
  #     echo "true"
  #   fi
  # }

  # if [ "$(has_builder $builder_name)" != "true" ]; then
  #   log::info "[$(timestamp)] creating builder instance: $builder_name ..."
  #   # docker buildx create --use --bootstrap --name=$builder_name --platform=linux/amd64,linux/arm64 >>/dev/null
  #   docker buildx create --append --name=$builder_name --platform=linux/amd64,linux/arm64 >>/dev/null
  #   if [ "$?" != "0" ]; then
  #     log::error "[$(timestamp)] failed to create builder instance: $builder_name."
  #     return 1
  #   fi
  # fi

  if [ "$PLUGIN_PACKAGE_BOOTSTRAP_SERVICE" = "true" ] || [ "$BUILDX_CREATE_BUILDER" = "true" ]; then
    echo "try to bootstrap" >>/dev/null
  else
    return 0
  fi

  local builder_name=$PACKAGE_CORE_BUILDER_NAME

  log::info "[$(timestamp)] try to bootstrap buildx builder ($builder_name) ..."
  bootstrap_service $builder_name
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to bootstrap buildx builder ($builder_name) ."
    return 1
  fi

  log::success "[$(timestamp)] succeed to bootstrap buildx builder ($builder_name) ."
}

bootstrap_service() {
  # see docker/setup-buildx-action
  local builder_name=$1
  if [ -z "$builder_name" ]; then
    log::error "[$(timestamp)] builder name is required."
    return 1
  fi

  # docker buildx inspect --builder $builder_name >>/dev/null
  # @TODO
  set +e
  docker buildx ls | grep $builder_name >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    set -e

    # log limit: 10 MB
    # issues:
    #   1. [output clipped, log limit 1MiB reached] and then exit code 7 - https://github.com/docker/buildx/issues/484
    #   2. Docker编译镜像时报错 output clipped, log limit 1MiB reached - https://www.mayanpeng.cn/archives/155.html
    #
    log::info "[$(timestamp)] creating builder: $builder_name ..."
    docker buildx create \
      --name ${builder_name} \
      --driver docker-container \
      --driver-opt env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760 \
      --driver-opt image=${PACKAGE_CORE_BUILDER_IMAGE} \
      --platform ${PACKAGE_CORE_BUILDER_PLATFORM} \
      --buildkitd-flags "--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host" \
      --use >>/dev/null
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)] failed to create builder: $builder_name ."
      return 1
    fi

    log::info "[$(timestamp)] succeed to create builder: $builder_name ."
  else
    set -e
  fi

  local status=$(docker buildx inspect --bootstrap $builder_name | grep Status | awk '{print $2}')
  if [ "$status" != "running" ]; then
    log::info "[$(timestamp)] bootstraping builder: $builder_name ..."
    docker buildx inspect --bootstrap --builder $builder_name
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)] failed to bootstrap builder: $builder_name ."
      return 1
    fi

    log::info "[$(timestamp)] succeed to bootstrap builder: $builder_name ."
  fi

  log::info "[$(timestamp)] inspecting builder: $builder_name ..."
  docker buildx inspect --builder $builder_name

  log::info "[$(timestamp)] show buildx version ..."
  docker buildx version
}

export -f install

export -f bootstrap_service
