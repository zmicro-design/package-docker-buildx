#!/bin/bash

install() {
  # get system os/arch
  local arch="$PACKAGE_OS_ARCH"
  local kernel="$PACKAGE_OS_KERNEL"
  local platform="$PACKAGE_OS_PLATFORM"
  # usr_bin_dir
  local usr_bin_dir="$PACKAGE_USER_BIN_DIR"
  local tmp_dir="$PACKAGE_TMP_DIR"

  # prepare vars
  local name="buildx"
  # files
  local tmp_file="$name"
  local bin_file="$tmp_file"

  # prepare context
  cd $tmp_dir

  # # reference: https://github.com/docker/buildx/releases
  # # example:
  # #   https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.darwin-arm64
  # #   https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.darwin-amd64
  # # generate url
  # local url="https://github.com/docker/buildx/releases/download/$PACKAGE_CORE_VERSION/${name}-${PACKAGE_CORE_VERSION}.${platform}-${arch}"
  # log::debug "[package][$name][$kernel][$arch] url: $url"

  # # download
  # os::download $tmp_file $url

  # # make executable
  # chmod +x $bin_file

  # # install
  # sudo mv $bin_file $usr_bin_dir/docker-buildx

  # clean
  rm -rf $tmp_dir

  if [ "$(os::is_macos)" = "true" ]; then
    log::info "[$(timestamp)] Docker Buildx is included in Docker Desktop for macOS."
    return
  fi

  # as docker plugin
  # https://github.com/docker/buildx
  mkdir -p $HOME/.docker/cli-plugins
  log::info "[$(timestamp)] creating docker plugin: docker-buildx ..."
  # log::info "[$(timestamp)] command: ln -sf $usr_bin_dir/docker-buildx $HOME/.docker/cli-plugins/docker-buildx"
  ln -sf $usr_bin_dir/docker-buildx $HOME/.docker/cli-plugins/docker-buildx
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to create docker plugin: docker-buildx."
    return 1
  fi

  # # if it in docker build env, do not create builder instance
  # if [ "$(os::is_docker_build_env)" = "true" ] || [ "$(os::is_docker)" = "true" ]; then
  #   return
  # fi

  # # create builder instance
  # local builder_name=buildx
  # has_builder() {
  #   docker buildx ls 2>>/dev/null | grep $1 >>/dev/null 2>&1
  #   if [ "$?" != "0" ]; then
  #     echo "false"
  #   else
  #     echo "true"
  #   fi
  # }

  # if [ "$(has_builder $builder_name)" != "true" ]; then
  #   log::info "[$(timestamp)] creating builder instance: $builder_name ..."
  #   # docker buildx create --use --bootstrap --name=$builder_name --platform=linux/amd64,linux/arm64 >>/dev/null
  #   docker buildx create --append --name=$builder_name --platform=linux/amd64,linux/arm64 >>/dev/null
  #   if [ "$?" != "0" ]; then
  #     log::error "[$(timestamp)] failed to create builder instance: $builder_name."
  #     return 1
  #   fi
  # fi

  # see docker/setup-buildx-action
  local builder_name=builder-zmicro-package
  log::info "[$(timestamp)] try to use buildx builder ($builder_name) ..."

  # docker buildx inspect --builder $builder_name >>/dev/null
  docker buildx ls | grep " $builder_name" >>/dev/null 2>&1 
  if [ "$?" != "0" ]; then
    log::info "[$(timestamp)] creating a builder: $builder_name ..."
    docker buildx create \
      --name ${builder_name} \
      --driver docker-container \
      --buildkitd-flags \
      --allow-insecure-entitlement security.insecure \
      --allow-insecure-entitlement network.host \
      --use
  fi

  local status=$(docker buildx inspect --bootstrap default | grep Status | awk '{print $2}')
  if [ "$status" != "running" ]; then
    log::info "[$(timestamp)] bootstraping builder: $builder_name ..."
    docker buildx inspect --bootstrap --builder $builder_name
  fi

  log::info "[$(timestamp)] inspecting builder: $builder_name ..."
  docker buildx inspect --builder $builder_name

  log::info "[$(timestamp)] show buildx version ..."
  docker buildx version
}

export -f install
