#!/bin/bash

export PACKAGE_NAME="docker-buildx"
import "$ZMICRO_PACKAGES_PATH/$PACKAGE_NAME/config"
import "$ZMICRO_PACKAGES_PATH/$PACKAGE_NAME/core"

help() {
  echo "Usage:"
  echo "  zmicro docker-buildx <command> <args ...>"
  echo ""
  echo "Command:"
  echo "  create <builder_name>  create a builder instance"
  echo "  bootstrap <builder_name>  bootstrap a builder instance"
  echo "  use <builder_name>  use a builder instance"
  echo ""

  docker-buildx --help
}

version() {
  docker-buildx version
}

create() {
  local builder_name=${1:-$PACKAGE_CORE_BUILDER_NAME}
  if [ -z "$builder_name" ]; then
    log::error "[$(timestamp)] builder name is required."
    return 1
  fi

  # log limit: 10 MB
  # issues:
  #   1. [output clipped, log limit 1MiB reached] and then exit code 7 - https://github.com/docker/buildx/issues/484
  #   2. Docker编译镜像时报错 output clipped, log limit 1MiB reached - https://www.mayanpeng.cn/archives/155.html
  #
  log::info "[$(timestamp)] creating builder: $builder_name with config (path: $PACKAGE_CORE_BUILDKITD_CONFIG_FILE) ..."
  docker buildx create \
    --name ${builder_name} \
    --driver docker-container \
    --driver-opt image=${PACKAGE_CORE_BUILDER_IMAGE:-whatwewant/docker-buildx-builder:v1-1} \
    --driver-opt env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760 \
    --driver-opt memory=${PACKAGE_CORE_BUILDER_MEMORY:-16G} \
    --driver-opt restart=always \
    --platform ${PACKAGE_CORE_BUILDER_PLATFORM:-"linux/amd64,linux/arm64"} \
    --buildkitd-flags "--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host" \
    --config ${PACKAGE_CORE_BUILDKITD_CONFIG_FILE:-"/etc/docker/buildx/buildkitd.default.toml"} \
    --use >>/dev/null
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to create builder: $builder_name ."
    return 1
  fi

  log::info "[$(timestamp)] succeed to create builder: $builder_name ."
}

bootstrap() {
  local builder_name=${1:-$PACKAGE_CORE_BUILDER_NAME}
  if [ -z "$builder_name" ]; then
    log::error "[$(timestamp)] builder name is required."
    return 1
  fi

  log::info "[$(timestamp)] try to bootstrap buildx builder ($builder_name) ..."
  bootstrap_service $builder_name
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to bootstrap buildx builder ($builder_name) ."
    return 1
  fi

  log::success "[$(timestamp)] succeed to bootstrap buildx builder ($builder_name) ."
}

use() {
  local builder_name=${1:-$PACKAGE_CORE_BUILDER_NAME}
  if [ -z "$builder_name" ]; then
    log::error "[$(timestamp)] builder name is required."
    return 1
  fi

  docker buildx use $builder_name
}

core() {
  case $1 in
  -h | --help | help)
    help
    ;;
  -v | --version | version)
    version
    ;;
  create)
    create "${@:2}"
    ;;
  use)
    use "${@:2}"
    ;;
  bootstrap)
    bootstrap "${@:2}"
    ;;
  *)
    docker-buildx "${@:2}"
    ;;
  esac
}

run() {
  core "$@"
}

run "$@"
